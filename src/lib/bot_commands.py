import aiosqlite

from globals                 import DB_NAME, IMAGE_PATH, VERBS_COUNT, VERBS_ON_PAGE
from lib.bot_search_handler  import search_present_simple, search_past_simple, search_past_participle
from lib.bot_db_updater      import add_user_in_db
from lib.bot_functions       import find_next_unlearned, is_bit_set
from lib.bot_image_manager   import get_image
from lib.bot_session_manager import is_session_active, start_user_session

from telegram                import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext            import ApplicationBuilder, ContextTypes, CallbackContext

# Command: /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message :
        await update.callback_query.answer()

    text = f"–ü—Ä–∏–≤–µ—Ç {update.effective_user.username}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞."

    keyboard = [
        [InlineKeyboardButton("‚ùì  –ü–æ–º–æ—â—å", callback_data="help_command")],
        [InlineKeyboardButton("üìî  –£—á–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", callback_data="irregular_verbs")],
        [InlineKeyboardButton("üî£  –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤", callback_data="table")],
        [InlineKeyboardButton("üìà  –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        message = await update.message.reply_text(text, reply_markup=reply_markup)
        await update.message.delete()
    else:
        message = await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        await update.callback_query.message.delete()

# Command: /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    text = ''' 
        –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å.. 


    '‚¨ÖÔ∏è Back'
        - —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—ë—Ç —Ç–µ–±—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞—Ä–Ω–∏—Ü—É.

    'üìî –£—á–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã'
        - —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã.
        - –≤ –æ–±—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–±–µ 7 –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏.
        - –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ <<Prev>> <<Next>>.
        - –∫–æ–≥–¥–∞ –≤—ã—É—á–∏—â—å –≤—Å–µ 7 –∫–∞—Ä—Ç–æ—á–µ–∫ –∂–º–∏ –∫–Ω–æ–ø–∫—É <<Learned!>>
        - –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—ã—É—á–∏–ª –¥–æ–±–∞–≤—è—Ç—Å—è –≤ —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –±–æ–ª—å—à–µ —Ç–µ–±–µ –Ω–µ –ø–æ–ø–∞–¥—É—Ç—Å—è!

    'üî£ –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤'
        - —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤.
        - –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 200 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤!
        - –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ <<Prev>> <<Next>>.
        - –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∂–º–∏ <<Learned!>>.

    'üìà  –ü—Ä–æ–≥—Ä–µ—Å—Å'
        - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –∫–∞–∫ –º–Ω–æ–≥–æ —Ç—ã —É—Å–ø–µ–ª –∏–∑—É—á–∏—Ç—å –∏ –º–∫–æ–ª—å–∫–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å –≥–ª–∞–≥–æ–ª–æ–≤.
        - —Ç–∞–∫–∂–µ –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –∏ —Å–∫–æ–ª—å–∫–æ –≥–ª–∞–≥–æ–ª–æ–≤ —Ç—ã –≤—ã—É—á–∏–ª!
        
    p.s.
        –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–ª–∞–≥–æ–ª...
    '''
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    await update.callback_query.message.delete()

# Command: /progress
async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_id   = update.effective_user.id
    user_name = update.effective_user.username
    await add_user_in_db(user_id, user_name)

    count = 0
    async with aiosqlite.connect(DB_NAME) as conn:
        cursor   = await conn.execute("SELECT progress FROM users WHERE id = ?", (user_id,))
        row      = await cursor.fetchone()
        progress = bytearray(row[0])

        for i in range(0, VERBS_COUNT):
            if is_bit_set(progress, i):
                count += 1

    text = f"Your progress: {count}/200"
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    await update.callback_query.message.delete()

# Command: /irregular_verbs
async def irregular_verbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

    if is_session_active(update.effective_user.id):
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
        ]
        text = "–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é."
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        await update.callback_query.message.delete()
        return

    try:
        user_id = update.effective_user.id
        user_name = update.effective_user.username

        await add_user_in_db(user_id, user_name)

        async with aiosqlite.connect(DB_NAME) as conn:
            cursor = await conn.execute("SELECT progress FROM users WHERE id = ?", (user_id,))
            row = await cursor.fetchone()
            progress = bytearray(row[0])

            verbs_indexes = find_next_unlearned(progress, 7)

            if len(verbs_indexes) == 0:
                message = await update.callback_query.message.reply_text("–í—ã —É–∂–µ –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã!")
                await update.callback_query.message.delete()
                return

        keyboard = [
            [
                InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data="ok"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = await update.callback_query.message.reply_text(
            "–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –≥–ª–∞–≥–æ–ª–æ–≤?",
            reply_markup=reply_markup
        )

        start_user_session(user_id, verbs_indexes, message.message_id)

        await update.callback_query.message.delete()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


    except aiosqlite.Error as db_error:
        message = await update.callback_query.message.reply_text(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}")
        await update.callback_query.message.delete()
    except Exception as e:
        message = await update.callback_query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await update.callback_query.message.delete()

# Command: /table
async def irregular_verbs_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

    if is_session_active(update.effective_user.id):
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
        ]
        text = "–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é."
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        await update.callback_query.message.delete()
        return

    try:
        user_id   = update.effective_user.id
        indexes   = []
        count_verbs = 0
        async with aiosqlite.connect(DB_NAME) as conn:
            cursor = await conn.execute("SELECT COUNT(*) FROM verbs")
            result = await cursor.fetchone()
            count_verbs = result[0]

        pages = 0
        if count_verbs % VERBS_ON_PAGE == 0:
            pages = count_verbs // VERBS_ON_PAGE
        else:
            pages = count_verbs // VERBS_ON_PAGE + 1
        for i in range(1, pages + 1):
            indexes.append(f"table_{i}")

        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å?", callback_data="ok"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = await update.callback_query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤?",
            reply_markup=reply_markup
        )
        start_user_session(user_id, indexes, message.message_id)
        await update.callback_query.message.delete()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

async def echo(update: Update, context: CallbackContext):
    verb = update.message.text.lower()

    functions = [
        search_present_simple,
        search_past_simple,
        search_past_participle
    ]
    for function in functions:
        verb_id = await function(verb, DB_NAME)
        if verb_id:
            image_path = IMAGE_PATH + str(verb_id) + '.png'
            try:
                img = get_image(image_path)
                keyboard = [
                    [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="start")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                message = await update.message.reply_photo(photo=img, reply_markup=reply_markup)
                return
            except Exception as e:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                return

    await update.message.reply_text(f"–ì–ª–∞–≥–æ–ª {verb} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")